/* cross computes the cross produce of two vectors of dimension 3 */
cross(_u,_v):=[_u[2]*_v[3]-_u[3]*_v[2],_u[3]*_v[1]-_u[1]*_v[3],_u[1]*_v[2]-_u[2]*_v[1]]$


/* dot duplicates the . operator for parallelism with cross */
dot(_u,_v) :=_u._v$

/* len computes the vector length */
len(_u):= sqrt(_u._u)$



/* curvature computes the curvature  of a vector values function r: R --> R^3
   curvature requires unitT */
curvature(r,t):=
block([T,Tdot,rdot,K],
    define(T(t),unitT(r,t)),
	define(Tdot(t),diff(T(t),t)),
	define(rdot(t),diff(r,t)),
	define(K(t),trigsimp(sqrt(Tdot(t).Tdot(t)/rdot(t).rdot(t)))),
	K(t)
)$


/* unitT computes the unit tangent vector for a vector valued function  r: R --> R^3
of a scalar variable r(t)=[x(t),y(t),z(t)]  */
unitT(r,t):=
block([rp,rpn,T],
   define(rp(t),diff(r,t)),
   define(rpn(t),sqrt(rp(t).rp(t))),
   define(T(t),rp(t)/rpn(t)),
   trigsimp(T(t))
)$

/* unitN computes the unit normal vector for a vector valued function  r: R --> R^3
of a scalar variable r(t)=[x(t),y(t),z(t)]  
  unitN requires unitT */
unitN(r,t):=
block([T,Tp,Tpn,N],
   define(T(t),unitT(r,t)),
   define(Tp(t),diff(T(t),t)),
   define(Tpn(t),sqrt(Tp(t).Tp(t))),
   define(N(t),Tp(t)/Tpn(t)),
   trigsimp(N(t)) 
)$

/* unitB computes the unit normal vector for a vector valued function  r: R --> R^3
of a scalar variable r(t)=[x(t),y(t),z(t)]  
  unitB requires unitT and unitN */
unitB(r,t):=
block([T,N,B],
   define(T(t),unitT(r,t)),
   define(N(t),unitN(r,t)),
   define(B(t),[T(t)[2]*N(t)[3]-T(t)[3]*N(t)[2],
                  T(t)[3]*N(t)[1]-T(t)[1]*N(t)[3],
                  T(t)[1]*N(t)[2]-T(t)[2]*N(t)[1]]),
    trigsimp(B(t)) 
)$




/*  integratePaths:   path integral of a complex integrand f(z): C --> C,  on path z(t): R --> C, t from a to b */
integratePaths(f,r,t,a,b):=block(
[f1,f2,dr,Iout],
f1:subst(x=r[1],f),
f2:subst(y=r[2],f1),
dr:sqrt(diff(r,t).diff(r,t)),
Iout: integrate(trigsimp(f2*dr),t,a,b),
Iout
);


/* integratePathv2: path integral of a vector integrand F(x,y) on path  r(t) in R^2, t from a to b */
integratePathv2(H,r,t,a,b):=block(
[H1,H2,I],
H2:psubst([x=r[1],y=r[2]],H),
/* H2:subst(y=r[2],H1), */
I: integrate( trigsimp(H2.diff(r,t)),t,a,b),
I
);

/*integratePathv3: path integral of a vector integrand F(x,y,z) on path  r(t) in R^3, t from a to b */
integratePathv3(H,r,t,a,b):=block(
[H1,H2,H3,I],
/*H1:subst(x=r[1],H),
H2:subst(y=r[2],H1),
H3:subst(z=r[3],H2), */
H3:psubst([x=r[1],y=r[2],z=r[3]],H),
I: integrate( trigsimp(H3.diff(r,t)),t,a,b),
I
);

/* path integral of a complex integrand f(z): C --> C,  on path z(t): R --> C, t from a to b */
integrateC(f,r,t,a,b):=block(
[f1,dz,Iout],
f1:subst(z=r,f),
dz:diff(r,t),
Iout: integrate(f1*dz,t,a,b),
Iout
);

/* Three Maxima functions for the multivariable calculus operators
   grad, div, and curl*/
   
   grad(f,x,y,z):=[diff(f,x),diff(f,y),diff(f,z)]$
   
   div(f,x,y,z):=diff(f[1],x)+diff(f[2],y)+diff(f[3],z)$
   
   curl(f,x,y,z):=[ diff(f[3],y)-diff(f[2],z),
                     diff(f[1],z)-diff(f[3],x),
					  diff(f[2],x)-diff(f[1],y) ]$